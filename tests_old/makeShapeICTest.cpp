/* Active Appearance Model toolbox
 * Copyright (C) 2012 Ivan Gubochkin
 * e-mail: jhng@yandex.ru
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* 
 * File:   makeShapeICTest.cpp
 * Author: Иван Губочкин
 *
 * Created on 02.10.2012, 16:04:38
 */

#include <stdlib.h>
#include <iostream>
#include <opencv2/highgui/highgui.hpp>
#include <boost/assign.hpp>
#include <iterator>
#include <vector>

#include "aam/AAMFunctions2D.h"
#include "aam/vector_op.h"
#include "aam/TrainModelLoader.h"
#include "aam/CommonFunctions.h"

/*
 * Simple C++ Test Suite
 */

#define TRIANGLES_COUNT         93
#define POINTS_COUNT            58

aam::RealType s0Data[2 * POINTS_COUNT] =
{
    29.233948561134525,
    11.148359423376007,
    2,
    2.1303392507400645,
    18.094694140191947,
    25.524334211639939,
    9.463122050427387,
    13.487850875858413,
    25.492627768412092,
    50.673433180720934,
    55.195592709946084,
    45.823340585398967,
    41.451269575659524,
    46.039196835203711,
    56.274951516992957,
    58.790057046192175,
    60.360771606314586,
    58.842621968192447,
    62.051937847211889,
    55.42626158210831,
    52.438069348205431,
    58.967527259987122,
    70.45916288154632,
    73.297889546934698,
    72.088492132114936,
    68.071907756553486,
    55.316966783933339,
    89.895998627330414,
    114.31711805243123,
    149.77086144172995,
    132.86052225417413,
    148.95246416410328,
    130.4008827799552,
    148.73361694786621,
    113.06414018581776,
    87.921281125556646,
    53.629284698143266,
    204.63506969320042,
    184.40745959204355,
    189.14635471363829,
    187.11068624863964,
    214.20139369747852,
    231.03881900385107,
    230.27468627176245,
    228.15048964523993,
    214.52067178591955,
    240.43115452694269,
    263.43672566875523,
    284.65995084997957,
    303.27782955594819,
    313.50954991723847,
    313.4285537884403,
    306.15604600127205,
    286.96109313274883,
    263.50993123226209,
    239.30190146899429,
    214.72592311663453,
    189.21174941905377,
    21.360009450578218,
    31.324042370996381,
    58.915981051058338,
    92.469338706215524,
    104.49004013751517,
    154.66267309926297,
    167.73506538718419,
    201.81441377761882,
    228.51452752592667,
    243.56973842190132,
    40.830357837635972,
    50.271305032151361,
    66.216978580620719,
    81.778888382988328,
    97.449047651474359,
    83.251889852914871,
    66.525555090069531,
    52.085042741201846,
    164.3326524405914,
    176.73214855200172,
    194.60034842664169,
    209.5111167365464,
    219.17392682763796,
    207.13095060445977,
    192.38816684161947,
    177.5587294649489,
    147.18197607238187,
    147.40779256177171,
    163.87212288297451,
    163.82975430566961,
    147.41186749897565,
    126.26076504337925,
    106.8122209112629,
    89.095343201611399,
    88.713000029832813,
    106.63384978526568,
    111.30263457651591,
    57.752886957381861,
    104.77250687783476,
    119.62529208441515,
    137.78862890335387,
    184.77038613103605,
    137.6965511857959,
    119.64600422486785,
    98.988797848881063,
    252.20745364229776,
    242.64338251474248,
    227.85536041661169,
    211.00629258734051,
    189.96705635298378,
    163.80599599778651,
    114.65372637549632,
    66.613499762198444,
    42.472605427126837,
    26.449768413425772,
    13.284966048147112,
    6.0309874238302541,
    2
};

int trianglesData[] =
{
    57, 10, 0,
    52, 44, 53,
    53, 44, 54,
    22, 45, 9,
    29, 41, 45,
    40, 29, 31,
    41, 29, 40,
    47, 41, 48,
    55, 54, 37,
    37, 54, 44,
    37, 56, 55,
    37, 33, 57,
    57, 56, 37,
    20, 25, 24,
    19, 25, 20,
    8, 7, 20,
    6, 19, 20,
    20, 7, 6,
    31, 29, 30,
    35, 30, 27,
    35, 27, 26,
    11, 12, 2,
    11, 0, 10,
    6, 4, 5,
    5, 19, 6,
    36, 4, 14,
    36, 35, 26,
    14, 35, 36,
    26, 5, 36,
    36, 5, 4,
    3, 4, 6,
    2, 12, 3,
    24, 25, 28,
    28, 25, 27,
    27, 30, 28,
    28, 30, 29,
    28, 29, 45,
    41, 40, 42,
    51, 50, 42,
    48, 41, 42,
    38, 37, 44,
    33, 37, 38,
    31, 33, 38,
    45, 41, 46,
    41, 47, 46,
    1, 11, 2,
    0, 11, 1,
    18, 25, 19,
    18, 5, 26,
    19, 5, 18,
    26, 27, 18,
    27, 25, 18,
    21, 20, 24,
    21, 22, 9,
    9, 8, 21,
    8, 20, 21,
    12, 16, 13,
    14, 4, 13,
    13, 3, 12,
    4, 3, 13,
    12, 11, 17,
    17, 16, 12,
    17, 11, 10,
    17, 10, 57,
    16, 17, 34,
    57, 33, 34,
    34, 17, 57,
    24, 28, 23,
    23, 21, 24,
    22, 21, 23,
    45, 22, 23,
    23, 28, 45,
    48, 42, 49,
    49, 42, 50,
    39, 38, 44,
    39, 42, 40,
    39, 40, 31,
    31, 38, 39,
    14, 13, 15,
    15, 13, 16,
    15, 35, 14,
    15, 34, 35,
    16, 34, 15,
    30, 35, 32,
    35, 34, 32,
    31, 30, 32,
    32, 33, 31,
    32, 34, 33,
    43, 39, 44,
    42, 39, 43,
    51, 42, 43,
    43, 52, 51,
    44, 52, 43
};

aam::RealType sStarData[2 * POINTS_COUNT * 4] =
{
  0.01253243166000432, 0.0173791683001624, 0.004909643449730873, 0.2073250287950142,
  0.01866570787170213, 0.006246736831991438, -0.01367792440040709, 0.2129091978245248,
  0.035649692418187, 0.0006155415443409044, -0.03821801753286107, 0.2008961663731934,
  0.05630317800706516, 0.0006957707680296802, -0.06065486967052792, 0.1787325745742754,
  0.06370241913014826, 0.01052249443108916, -0.05822014509933011, 0.1601076388409604,
  0.09458575910707187, 0.01509574655456532, -0.08701014106335171, 0.1221099207359422,
  0.102632359644209, 0.005209403216865635, -0.1063522684436566, 0.1242901172769354,
  0.1236096143825889, 0.007686791013624804, -0.1265799152032717, 0.09916635576281289,
  0.1400446436333001, 0.0150762299215353, -0.1366038749333998, 0.07354110181290746,
  0.1493117513985863, 0.03057606177277569, -0.1301421842243339, 0.04673312099446263,
  0.02451723997502929, 0.03335963883315087, 0.008921429311917362, 0.1770880156042182,
  0.03032853519118222, 0.02759062828645482, -0.003582164098513307, 0.1771675380271338,
  0.04014375971276295, 0.0248994369451517, -0.01716221881424783, 0.1696109805834543,
  0.04972276170540617, 0.02772349677581527, -0.02458953027221453, 0.1562925402534479,
  0.059368395741598, 0.03402402902013846, -0.02837357136924366, 0.1391117881926021,
  0.05062945530502118, 0.0355721809617621, -0.01718897567322305, 0.1467644103265456,
  0.0403337013739364, 0.03653902102781859, -0.004928029010016456, 0.1567149996675514,
  0.03144496610164049, 0.0356045368550283, 0.003766277222456042, 0.1672350469989885,
  0.1005380331245778, 0.03758000410747772, -0.06946811274328371, 0.09122859010975846,
  0.1081704381100444, 0.03350162510695299, -0.08215054213574967, 0.08751793216045849,
  0.1191690574554722, 0.03166226864450891, -0.09611057840910738, 0.07776754224162612,
  0.1283472548082603, 0.03568142125123595, -0.1018234017546934, 0.06357426645341113,
  0.1342951158544037, 0.04275500038873345, -0.1007487301912042, 0.04950298379702107,
  0.1268821636715278, 0.04450235458430832, -0.09079720015420684, 0.05552105345522263,
  0.1178073677862651, 0.04375792023186826, -0.08169685449880333, 0.06603272813356544,
  0.1086792330017226, 0.04128554568235962, -0.07438530389283264, 0.07848573294529483,
  0.08998107930639906, 0.03343434961809594, -0.06238697206326432, 0.1070335415807318,
  0.09012007873701573, 0.05471918028079388, -0.0397876166641498, 0.08367387903573061,
  0.1002545580494677, 0.0697513938462541, -0.03477162178066598, 0.05644871926298275,
  0.1002284784299619, 0.09157464580476916, -0.01141673996016228, 0.03267835850521187,
  0.09012258703015533, 0.08116562950593254, -0.01152226589650529, 0.054831368738768,
  0.07710320476012483, 0.09107088828061445, 0.01326289385310047, 0.05794585288681351,
  0.06513181786985969, 0.07965161922544997, 0.01411184990811511, 0.08319453404934266,
  0.05422634360356187, 0.09093617872715717, 0.0380661021131951, 0.08254537756834864,
  0.05399099549713707, 0.06898013391521388, 0.01485436734171118, 0.1067399837352264,
  0.06502202303149754, 0.05350365962011504, -0.01371745533200704, 0.1118262181472231,
  0.06789585403209904, 0.03239551118065224, -0.03941344749142346, 0.1317728540779858,
  0.0349337596835516, 0.1253458452809203, 0.09588445905356097, 0.06564312800791622,
  0.06387628914370952, 0.1128949109209285, 0.05101409929080482, 0.04828476398267768,
  0.07301879548753175, 0.1158118977425445, 0.04416211376867427, 0.03533154841055599,
  0.0841990838834453, 0.1145588592318332, 0.03063067121042378, 0.02474759683777884,
  0.1131183072832222, 0.1312343151321791, 0.01691834866679969, -0.02434815833547916,
  0.08414240622298028, 0.1415984499079883, 0.05959456136307846, -0.004678470986941711,
  0.07303154467045261, 0.141128094465997, 0.07120819232990219, 0.007710631171665963,
  0.06031617595600893, 0.1398205631940236, 0.08367669624962522, 0.02272769876781464,
  0.1546286239649261, 0.1314308440598123, -0.02813854867644481, -0.06893202874364705,
  0.1487415408528845, 0.14737982262084, -0.004671142339196513, -0.08003178900178383,
  0.1396388988928536, 0.1615407074099159, 0.02039157000965728, -0.08574458740110212,
  0.1292675976605194, 0.1746044842138615, 0.04566507715291652, -0.08890494574108536,
  0.1163170736970703, 0.186064562024885, 0.07203706227046906, -0.08755959164270756,
  0.1002138542044366, 0.1923626109773379, 0.09632946858094382, -0.07721519584753161,
  0.06995859025327157, 0.1923127544951319, 0.1292695162590791, -0.04482157467550577,
  0.04038783497323519, 0.1878362238205871, 0.156731523426959, -0.008332327023442158,
  0.02552811159245462, 0.1760209328883454, 0.1603069078971808, 0.02043550134089921,
  0.01566538975231847, 0.1615857684755312, 0.1556327357535819, 0.04671910336394294,
  0.00756190697345205, 0.1466847204495988, 0.1485421412150321, 0.07163033524273314,
  0.003096781768424142, 0.1315571847808986, 0.1372418328376207, 0.09289958330545832,
  0.0006155415443409043, 0.1158521509005077, 0.123160823255767, 0.1126780572672818,
  0.0173791683001624, -0.01253243166000433, 0.2073250287950143, -0.004909643449730848,
  0.006246736831991437, -0.01866570787170213, 0.2129091978245248, 0.01367792440040711,
  0.0006155415443409043, -0.03564969241818701, 0.2008961663731934, 0.03821801753286109,
  0.00069577076802968, -0.05630317800706517, 0.1787325745742754, 0.06065486967052795,
  0.01052249443108916, -0.06370241913014828, 0.1601076388409604, 0.05822014509933014,
  0.01509574655456532, -0.09458575910707188, 0.1221099207359421, 0.08701014106335174,
  0.005209403216865634, -0.102632359644209, 0.1242901172769353, 0.1063522684436566,
  0.007686791013624803, -0.1236096143825889, 0.09916635576281287, 0.1265799152032718,
  0.0150762299215353, -0.1400446436333001, 0.07354110181290741, 0.1366038749333998,
  0.03057606177277568, -0.1493117513985864, 0.04673312099446254, 0.1301421842243339,
  0.03335963883315087, -0.02451723997502929, 0.1770880156042182, -0.008921429311917332,
  0.02759062828645481, -0.03032853519118222, 0.1771675380271338, 0.003582164098513342,
  0.0248994369451517, -0.04014375971276296, 0.1696109805834544, 0.01716221881424787,
  0.02772349677581526, -0.04972276170540618, 0.1562925402534479, 0.02458953027221457,
  0.03402402902013846, -0.05936839574159801, 0.1391117881926022, 0.02837357136924371,
  0.03557218096176209, -0.05062945530502119, 0.1467644103265456, 0.0171889756732231,
  0.03653902102781859, -0.04033370137393641, 0.1567149996675514, 0.004928029010016503,
  0.0356045368550283, -0.03144496610164049, 0.1672350469989886, -0.003766277222455993,
  0.03758000410747771, -0.1005380331245778, 0.0912285901097584, 0.06946811274328374,
  0.03350162510695298, -0.1081704381100444, 0.08751793216045844, 0.08215054213574971,
  0.0316622686445089, -0.1191690574554722, 0.07776754224162609, 0.0961105784091074,
  0.03568142125123595, -0.1283472548082604, 0.06357426645341108, 0.1018234017546934,
  0.04275500038873344, -0.1342951158544037, 0.04950298379702105, 0.1007487301912042,
  0.04450235458430831, -0.1268821636715279, 0.0555210534552226, 0.09079720015420689,
  0.04375792023186825, -0.1178073677862651, 0.06603272813356541, 0.08169685449880336,
  0.04128554568235961, -0.1086792330017226, 0.07848573294529475, 0.0743853038928327,
  0.03343434961809593, -0.08998107930639908, 0.1070335415807318, 0.06238697206326436,
  0.05471918028079387, -0.09012007873701575, 0.08367387903573061, 0.03978761666414987,
  0.06975139384625409, -0.1002545580494677, 0.05644871926298275, 0.03477162178066606,
  0.09157464580476915, -0.1002284784299619, 0.03267835850521182, 0.01141673996016239,
  0.08116562950593252, -0.09012258703015534, 0.054831368738768, 0.01152226589650535,
  0.09107088828061444, -0.07710320476012485, 0.05794585288681354, -0.01326289385310037,
  0.07965161922544996, -0.06513181786985971, 0.0831945340493427, -0.01411184990811502,
  0.09093617872715716, -0.05422634360356188, 0.08254537756834865, -0.03806610211319502,
  0.06898013391521386, -0.05399099549713709, 0.1067399837352264, -0.0148543673417111,
  0.05350365962011504, -0.06502202303149755, 0.1118262181472231, 0.01371745533200712,
  0.03239551118065223, -0.06789585403209905, 0.1317728540779858, 0.03941344749142351,
  0.1253458452809203, -0.03493375968355161, 0.06564312800791626, -0.09588445905356084,
  0.1128949109209285, -0.06387628914370953, 0.0482847639826777, -0.0510140992908047,
  0.1158118977425445, -0.07301879548753176, 0.03533154841055599, -0.04416211376867415,
  0.1145588592318331, -0.08419908388344531, 0.02474759683777884, -0.0306306712104237,
  0.1312343151321791, -0.1131183072832223, -0.02434815833547914, -0.01691834866679955,
  0.1415984499079883, -0.0841424062229803, -0.004678470986941742, -0.05959456136307831,
  0.141128094465997, -0.07303154467045263, 0.007710631171665987, -0.07120819232990205,
  0.1398205631940236, -0.06031617595600895, 0.02272769876781465, -0.08367669624962507,
  0.1314308440598123, -0.1546286239649261, -0.06893202874364714, 0.0281385486764449,
  0.14737982262084, -0.1487415408528845, -0.08003178900178386, 0.004671142339196642,
  0.1615407074099158, -0.1396388988928536, -0.08574458740110218, -0.02039157000965709,
  0.1746044842138614, -0.1292675976605194, -0.0889049457410854, -0.04566507715291635,
  0.186064562024885, -0.1163170736970704, -0.08755959164270762, -0.0720370622704689,
  0.1923626109773379, -0.1002138542044366, -0.07721519584753161, -0.09632946858094367,
  0.1923127544951318, -0.06995859025327159, -0.04482157467550577, -0.1292695162590789,
  0.187836223820587, -0.0403878349732352, -0.008332327023442129, -0.1567315234269588,
  0.1760209328883454, -0.02552811159245463, 0.02043550134089928, -0.1603069078971807,
  0.1615857684755312, -0.01566538975231847, 0.04671910336394302, -0.1556327357535818,
  0.1466847204495988, -0.007561906973452051, 0.07163033524273318, -0.148542141215032,
  0.1315571847808986, -0.003096781768424143, 0.09289958330545835, -0.1372418328376206,
  0.1158521509005077, -0.0006155415443409042, 0.1126780572672818, -0.1231608232557669
};

bool loadVector(const std::string& fileName, int rows,
        int columns, aam::RealMatrix& target)
{
    cv::Mat1d result(rows, columns);

    FILE *in = fopen(fileName.c_str(), "rb");
    if (in == NULL)
    {
        return false;
    }

    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < columns; j++)
        {
            if (fread(result.ptr(i, j), sizeof(double), 1, in) != 1)
            {
                fclose(in);
                return false;
            }
        }
    }

    target = result;

    fclose(in);
    return true;
}

void testMakeShapeModelIC()
{
    std::cout << "makeShapeICTest testMakeShapeModelIC" << std::endl;

    aam::AppearanceDataIC model;
    aam::TrainModelLoader loader;
    loader.useGrayImages(true);

    aam::RealMatrix sData, targetS;

    if (!loadVector("data/s_data.raw", 2 * POINTS_COUNT, 16,
            sData))
    {
        std::cout << "%TEST_FAILED% time=0 testname=testMakeShapeModelIC (makeShapeICTest) message=Can't read shape data" << std::endl;
        return;
    }

    targetS = aam::RealMatrix(sData.rows, sData.cols);
    sData.rowRange(POINTS_COUNT, 2 * POINTS_COUNT).copyTo(
        targetS.rowRange(0, POINTS_COUNT));
    sData.rowRange(0, POINTS_COUNT).copyTo(
        targetS.rowRange(POINTS_COUNT, 2 * POINTS_COUNT));

    aam::RealMatrix sStar = aam::RealMatrix(2 * POINTS_COUNT, 4, sStarData);

    aam::Vertices2DList targets0;

    for (int i = 0; i < TRIANGLES_COUNT; i++)
    {
        model.triangles.push_back(cv::Vec3i(trianglesData[i * 3],
                trianglesData[i * 3 + 1], trianglesData[i * 3 + 2]));
    }

    for (int i = 0; i < POINTS_COUNT; i++)
    {
        targets0.push_back(aam::Point2D(s0Data[i + POINTS_COUNT] - 1,
                s0Data[i] - 1));
    }

    try
    {
        std::vector<std::string> fileNames =
                boost::assign::list_of<std::string>
                ("107_0764.bmp")  /*("107_0766.bmp")*/  ("107_0779.bmp")
                ("107_0780.bmp")  ("107_0781.bmp")  ("107_0782.bmp")
                ("107_0783.bmp")  ("107_0784.bmp")  ("107_0785.bmp")
                ("107_0786.bmp")  ("107_0787.bmp")  ("107_0788.bmp")
                ("107_0789.bmp")  ("107_0790.bmp")  ("107_0791.bmp")
                ("107_0792.bmp")  ("107_0793.bmp")  ("107_0794.bmp")
                ("107_0795.bmp")  ("107_0798.bmp")  ("107_0799.bmp")
                ("107_0800.bmp")  ("108_0801.bmp")  ("108_0802.bmp")
                ("108_0803.bmp")  ("108_0804.bmp");

        for (int i = 0; i < fileNames.size(); i++)
        {
            std::ostringstream stream;

            stream << "data/cootes/" << fileNames[i] << ".mat.dat";
            std::string markupFile = stream.str();

            stream.str(std::string());

            stream << "data/cootes/" << fileNames[i];
            std::string imageFile = stream.str();

            loader.load(markupFile, imageFile);
        }

        std::vector<aam::TrainModelInfo> trainData = loader.getModels();
        aam::AAMFunctions2D::makeShapeModelIC(1,
                0.98,
                trainData, model);

        if (model.textureSize.width != 254 ||
                model.textureSize.height != 315)
        {
            std::cout << "%TEST_FAILED% time=0 testname=testMakeShapeModelIC (makeShapeICTest) message=Invalid texture size" << std::endl;
        }
        else if (model.s.cols != 16 || model.s.rows != 2 * POINTS_COUNT)
        {
            std::cout << "%TEST_FAILED% time=0 testname=testMakeShapeModelIC (makeShapeICTest) message=Invalid s matrix size" << std::endl;
        }
        else if (cv::countNonZero(cv::abs(
                cv::abs(model.s) - cv::abs(targetS)) > 1e-10))
        {
            std::cout << "%TEST_FAILED% time=0 testname=testMakeShapeModelIC (makeShapeICTest) message=Invalid s matrix data" << std::endl;
        }
        else if (model.s0.size() != POINTS_COUNT)
        {
            std::cout << "%TEST_FAILED% time=0 testname=testMakeShapeModelIC (makeShapeICTest) message=Invalid mean shape size" << std::endl;
        }
        else if (model.sStar.rows != 2 * POINTS_COUNT ||
                model.sStar.cols != 4)
        {
            
        }
        else if (cv::countNonZero(cv::abs(model.sStar - sStar) > 1e-10))
        {

        }

        cv::Mat3b img = cv::Mat3b::zeros(model.textureSize.height,
                model.textureSize.width);

        for (int i = 0; i < model.s0.size(); i++)
        {
            cv::circle(img, model.s0[i], 3,
                    CV_RGB(255, 0, 0));
        }

        aam::Vertices2DList plotS = model.s0;
        
        for (int k = 0; k < model.s.cols; k++)
        {
            aam::Vertices2DList deltaS =
                    aam::mat2PointVector<aam::RealType>(
                        model.s.col(k) * model.s.cols);

            for (int j = 0; j < 5; j++)
            for (int i = 0; i < model.s0.size(); i++)
            {
                cv::circle(img, plotS[i], 1,
                        CV_RGB(0, 0, 255));
                plotS[i] += deltaS[i];
            }

            break;
        }
        cv::imshow("test", img);
        cv::waitKey(0);
//        std::cout << model.sStar <<
//                std::endl;
    }
    catch (std::exception& e)
    {
        std::cout << "%TEST_FAILED% time=0 testname=testMakeShapeModelIC (makeShapeICTest) message=Exception occured: " <<
                e.what() << std::endl;
    }
}

void test2()
{
    std::cout << "makeShapeICTest test 2" << std::endl;
    std::cout << "%TEST_FAILED% time=0 testname=test2 (makeShapeICTest) message=error message sample" << std::endl;
}

int main(int argc, char** argv)
{
    std::cout << "%SUITE_STARTING% makeShapeICTest" << std::endl;
    std::cout << "%SUITE_STARTED%" << std::endl;

    std::cout << "%TEST_STARTED% testMakeShapeModelIC (makeShapeICTest)" << std::endl;
    testMakeShapeModelIC();
    std::cout << "%TEST_FINISHED% time=0 testMakeShapeModelIC (makeShapeICTest)" << std::endl;

    std::cout << "%TEST_STARTED% test2 (makeShapeICTest)\n" << std::endl;
    test2();
    std::cout << "%TEST_FINISHED% time=0 test2 (makeShapeICTest)" << std::endl;

    std::cout << "%SUITE_FINISHED% time=0" << std::endl;

    return (EXIT_SUCCESS);
}
