/* Active Appearance Model toolbox
 * Copyright (C) 2012 Ivan Gubochkin
 * e-mail: jhng@yandex.ru
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* 
 * File:   cjacobianTest.cpp
 * Author: Иван Губочкин
 *
 * Created on 01.10.2012, 17:53:49
 */

#include <stdlib.h>
#include <iostream>
#include <exception>
#include <opencv2/highgui/highgui.hpp>
#include <algorithm>
#include <boost/assign.hpp>

#include "aam/AAMFunctions2D.h"
#include "aam/TrainModelLoader.h"

#define POINTS_COUNT            58
#define TRIANGLES_COUNT         93

aam::RealType s0Data[2 * POINTS_COUNT] =
{
    29.233948561134525,
    11.148359423376007,
    2,
    2.1303392507400645,
    18.094694140191947,
    25.524334211639939,
    9.463122050427387,
    13.487850875858413,
    25.492627768412092,
    50.673433180720934,
    55.195592709946084,
    45.823340585398967,
    41.451269575659524,
    46.039196835203711,
    56.274951516992957,
    58.790057046192175,
    60.360771606314586,
    58.842621968192447,
    62.051937847211889,
    55.42626158210831,
    52.438069348205431,
    58.967527259987122,
    70.45916288154632,
    73.297889546934698,
    72.088492132114936,
    68.071907756553486,
    55.316966783933339,
    89.895998627330414,
    114.31711805243123,
    149.77086144172995,
    132.86052225417413,
    148.95246416410328,
    130.4008827799552,
    148.73361694786621,
    113.06414018581776,
    87.921281125556646,
    53.629284698143266,
    204.63506969320042,
    184.40745959204355,
    189.14635471363829,
    187.11068624863964,
    214.20139369747852,
    231.03881900385107,
    230.27468627176245,
    228.15048964523993,
    214.52067178591955,
    240.43115452694269,
    263.43672566875523,
    284.65995084997957,
    303.27782955594819,
    313.50954991723847,
    313.4285537884403,
    306.15604600127205,
    286.96109313274883,
    263.50993123226209,
    239.30190146899429,
    214.72592311663453,
    189.21174941905377,
    21.360009450578218,
    31.324042370996381,
    58.915981051058338,
    92.469338706215524,
    104.49004013751517,
    154.66267309926297,
    167.73506538718419,
    201.81441377761882,
    228.51452752592667,
    243.56973842190132,
    40.830357837635972,
    50.271305032151361,
    66.216978580620719,
    81.778888382988328,
    97.449047651474359,
    83.251889852914871,
    66.525555090069531,
    52.085042741201846,
    164.3326524405914,
    176.73214855200172,
    194.60034842664169,
    209.5111167365464,
    219.17392682763796,
    207.13095060445977,
    192.38816684161947,
    177.5587294649489,
    147.18197607238187,
    147.40779256177171,
    163.87212288297451,
    163.82975430566961,
    147.41186749897565,
    126.26076504337925,
    106.8122209112629,
    89.095343201611399,
    88.713000029832813,
    106.63384978526568,
    111.30263457651591,
    57.752886957381861,
    104.77250687783476,
    119.62529208441515,
    137.78862890335387,
    184.77038613103605,
    137.6965511857959,
    119.64600422486785,
    98.988797848881063,
    252.20745364229776,
    242.64338251474248,
    227.85536041661169,
    211.00629258734051,
    189.96705635298378,
    163.80599599778651,
    114.65372637549632,
    66.613499762198444,
    42.472605427126837,
    26.449768413425772,
    13.284966048147112,
    6.0309874238302541,
    2
};

int trianglesData[3 * TRIANGLES_COUNT] =
{
    57, 10, 0,
    52, 44, 53,
    53, 44, 54,
    22, 45, 9,
    29, 41, 45,
    40, 29, 31,
    41, 29, 40,
    47, 41, 48,
    55, 54, 37,
    37, 54, 44,
    37, 56, 55,
    37, 33, 57,
    57, 56, 37,
    20, 25, 24,
    19, 25, 20,
    8, 7, 20,
    6, 19, 20,
    20, 7, 6,
    31, 29, 30,
    35, 30, 27,
    35, 27, 26,
    11, 12, 2,
    11, 0, 10,
    6, 4, 5,
    5, 19, 6,
    36, 4, 14,
    36, 35, 26,
    14, 35, 36,
    26, 5, 36,
    36, 5, 4,
    3, 4, 6,
    2, 12, 3,
    24, 25, 28,
    28, 25, 27,
    27, 30, 28,
    28, 30, 29,
    28, 29, 45,
    41, 40, 42,
    51, 50, 42,
    48, 41, 42,
    38, 37, 44,
    33, 37, 38,
    31, 33, 38,
    45, 41, 46,
    41, 47, 46,
    1, 11, 2,
    0, 11, 1,
    18, 25, 19,
    18, 5, 26,
    19, 5, 18,
    26, 27, 18,
    27, 25, 18,
    21, 20, 24,
    21, 22, 9,
    9, 8, 21,
    8, 20, 21,
    12, 16, 13,
    14, 4, 13,
    13, 3, 12,
    4, 3, 13,
    12, 11, 17,
    17, 16, 12,
    17, 11, 10,
    17, 10, 57,
    16, 17, 34,
    57, 33, 34,
    34, 17, 57,
    24, 28, 23,
    23, 21, 24,
    22, 21, 23,
    45, 22, 23,
    23, 28, 45,
    48, 42, 49,
    49, 42, 50,
    39, 38, 44,
    39, 42, 40,
    39, 40, 31,
    31, 38, 39,
    14, 13, 15,
    15, 13, 16,
    15, 35, 14,
    15, 34, 35,
    16, 34, 15,
    30, 35, 32,
    35, 34, 32,
    31, 30, 32,
    32, 33, 31,
    32, 34, 33,
    43, 39, 44,
    42, 39, 43,
    51, 42, 43,
    43, 52, 51,
    44, 52, 43
};

aam::RealType sStarData[2 * POINTS_COUNT * 4] =
{
    0.017895347590553057, -0.013075373408974798, 0.2072475505614777, -0.0049105426250012534,
    0.0068243866041060326, -0.019174783214725533, 0.21284342504968212, 0.013721310245458819,
    0.001224285358040499, -0.036064986477701108, 0.20080012105781697, 0.038318340874618051,
    0.001304071576170014, -0.056604428722853622, 0.17858247946710021, 0.060806368523543049,
    0.011076534547029109, -0.063962813100711932, 0.15991380323784907, 0.058364431457680215,
    0.01562453432452148, -0.094675623055415908, 0.12182418448205827, 0.087219339491853842,
    0.0057927808838442174, -0.10267779229174766, 0.12400799764231693, 0.10660726318740081,
    0.0082564891693735869, -0.12353921591473274, 0.098823378173736293, 0.12688064082492448,
    0.015605125457421782, -0.1398834950747673, 0.073136888388508001, 0.13692622336015117,
    0.031019371142400116, -0.14909943220584407, 0.0462661825838609, 0.13044717571013642,
    0.033787577991576945, -0.024994004632085925, 0.176939530675745, -0.0089341771216101245,
    0.028050422467603451, -0.030773211340225284, 0.17701825417852995, 0.0035989160997271573,
    0.02537409120683478, -0.040534238664967644, 0.16944280086273489, 0.017210407323505331,
    0.028182557290642191, -0.050060347822060432, 0.15609235893726778, 0.024654187572666551,
    0.03444829958334672, -0.059652721097345464, 0.13887078228499181, 0.028445798971657017,
    0.035987903020009371, -0.050962034888062037, 0.14654233789399532, 0.017235424767184239,
    0.03694940443881882, -0.040723131516144359, 0.15651736608729491, 0.0049463419967268312,
    0.036020080252185109, -0.031883477600483497, 0.16706291411349705, -0.003767642405622375,
    0.037984639472190301, -0.10059503011548716, 0.090871394839546288, 0.069633496500979275,
    0.03392878025294891, -0.10818529088362704, 0.08715098356460986, 0.082345548509067515,
    0.032099580253460103, -0.11912317862415843, 0.077376492971507685, 0.096337744505659503,
    0.036096540112128109, -0.12825069628363375, 0.063149287289950465, 0.10206292347752763,
    0.043131060727833882, -0.13416571473965844, 0.049044898012280271, 0.10098460678930257,
    0.044868766473790948, -0.12679369501102497, 0.055077948269851643, 0.091010077843565421,
    0.044128442700283016, -0.11776900786222368, 0.065615135928861867, 0.081889095589945435,
    0.041669719980115955, -0.10869127633810553, 0.078098091809349221, 0.074561280969635269,
    0.033861876242391106, -0.090096369136442103, 0.10671418578863484, 0.062536899757743181,
    0.055029177432934707, -0.090234601047224139, 0.083301205383218974, 0.039882393878414892,
    0.069978386902489378, -0.10031312031831954, 0.056012222519232338, 0.034852419254076589,
    0.091681136362111157, -0.10028718470390185, 0.032187634752998261, 0.011440572411047444,
    0.08132959602869963, -0.090237095490200994, 0.054392891288899604, 0.011548095072070243,
    0.091180160460081885, -0.077289602968800442, 0.05751667737597755, -0.013295282308675355,
    0.07982394573152729, -0.065384319060723187, 0.082824982230379873, -0.014144248836119153,
    0.091046194738838404, -0.054539062075662975, 0.082176184438393127, -0.038155055664147078,
    0.069211385674467538, -0.054305013502185334, 0.10642602961975939, -0.014886660054333716,
    0.053820368571090745, -0.065275130481795396, 0.11152200723050922, 0.013752959262808444,
    0.03282877400906109, -0.068133092911680307, 0.13151366604210094, 0.03951113698614972,
    0.12526585978349117, -0.035353006943245363, 0.065238627473823835, -0.096111128364926773,
    0.11288367634599195, -0.064135723047865287, 0.047835778311340976, -0.051136297705438601,
    0.11578455630132094, -0.073227746775133731, 0.034851468029272172, -0.044269171658526812,
    0.11453843675355962, -0.084346300435426014, 0.024241483387777669, -0.030706646111624117,
    0.1311218149878457, -0.11310583916985836, -0.024971160954335679, -0.016965852390684551,
    0.14142872162269193, -0.084289935734722016, -0.0052517096198544735, -0.059741178062101635,
    0.14096096336494413, -0.073240425560278696, 0.007167532295544783, -0.071381225853034733,
    0.13966065195121885, -0.060595267908207961, 0.022221005953159869, -0.083877955736327808,
    0.13131725873225644, -0.15438694634147154, -0.069663750873607752, 0.028193807839913512,
    0.14717817105205427, -0.14853237021910962, -0.080787841788397124, 0.0046701707311563893,
    0.16126086300319437, -0.1394799907545492, -0.086512138187480617, -0.020452110388777277,
    0.17425250492307903, -0.12916595723454524, -0.089677957188120092, -0.045785482146629024,
    0.18564930307182473, -0.1162869428015062, -0.088327348987241497, -0.07221956748603614,
    0.191912575784771, -0.1002726412296653, -0.077956636179201788, -0.096568458698952586,
    0.1918629945974982, -0.070184439223150957, -0.045484005900150871, -0.1295836497566937,
    0.18741118219746541, -0.040776966203346907, -0.0089065205592836934, -0.15710755554234324,
    0.17566113232486019, -0.025999294471131414, 0.019929447585886523, -0.16068910394685149,
    0.16130567525295864, -0.01619103209605963, 0.046274678718023189, -0.15600183264176798,
    0.14648690705986994, -0.0081322947074058318, 0.071244111903686375, -0.14889254734896867,
    0.13144290183171278, -0.0036918247987608867, 0.092562638409719997, -0.13756390566605523,
    0.11582458719148771, -0.0012242853580405012, 0.11238665498024103, -0.12344812126504698,
    0.013075373408974798, 0.017895347590553057, 0.0049105426250012525, 0.20724755056147776,
    0.019174783214725533, 0.0068243866041060326, -0.013721310245458815, 0.21284342504968215,
    0.036064986477701108, 0.0012242853580404984, -0.038318340874618044, 0.200800121057817,
    0.056604428722853622, 0.0013040715761700129, -0.060806368523543042, 0.17858247946710026,
    0.063962813100711932, 0.011076534547029107, -0.058364431457680208, 0.15991380323784909,
    0.094675623055415908, 0.015624534324521478, -0.087219339491853828, 0.1218241844820583,
    0.10267779229174766, 0.0057927808838442148, -0.1066072631874008, 0.12400799764231696,
    0.12353921591473274, 0.0082564891693735851, -0.12688064082492445, 0.098823378173736334,
    0.1398834950747673, 0.01560512545742178, -0.13692622336015114, 0.073136888388508015,
    0.14909943220584407, 0.03101937114240011, -0.13044717571013642, 0.046266182583860914,
    0.024994004632085925, 0.033787577991576945, 0.0089341771216101228, 0.17693953067574503,
    0.030773211340225284, 0.028050422467603451, -0.0035989160997271564, 0.17701825417852995,
    0.040534238664967644, 0.02537409120683478, -0.017210407323505324, 0.16944280086273492,
    0.050060347822060432, 0.028182557290642191, -0.024654187572666547, 0.15609235893726781,
    0.059652721097345464, 0.03444829958334672, -0.02844579897165701, 0.13887078228499183,
    0.050962034888062037, 0.035987903020009371, -0.017235424767184235, 0.14654233789399534,
    0.040723131516144359, 0.03694940443881882, -0.0049463419967268295, 0.15651736608729494,
    0.031883477600483497, 0.036020080252185109, 0.0037676424056223741, 0.16706291411349708,
    0.10059503011548716, 0.037984639472190301, -0.069633496500979261, 0.090871394839546302,
    0.10818529088362704, 0.03392878025294891, -0.082345548509067501, 0.08715098356460986,
    0.11912317862415843, 0.032099580253460103, -0.096337744505659489, 0.077376492971507699,
    0.12825069628363375, 0.036096540112128102, -0.10206292347752761, 0.063149287289950479,
    0.13416571473965844, 0.043131060727833882, -0.10098460678930256, 0.049044898012280291,
    0.12679369501102497, 0.044868766473790948, -0.091010077843565407, 0.055077948269851656,
    0.11776900786222368, 0.044128442700283016, -0.081889095589945407, 0.065615135928861895,
    0.10869127633810553, 0.041669719980115955, -0.074561280969635255, 0.078098091809349249,
    0.090096369136442103, 0.033861876242391106, -0.062536899757743167, 0.10671418578863488,
    0.090234601047224139, 0.055029177432934707, -0.039882393878414885, 0.083301205383218987,
    0.10031312031831954, 0.069978386902489378, -0.034852419254076582, 0.056012222519232352,
    0.10028718470390185, 0.091681136362111157, -0.01144057241104744, 0.032187634752998268,
    0.090237095490200994, 0.08132959602869963, -0.01154809507207024, 0.054392891288899618,
    0.077289602968800442, 0.091180160460081885, 0.013295282308675351, 0.05751667737597755,
    0.065384319060723187, 0.07982394573152729, 0.014144248836119151, 0.082824982230379887,
    0.054539062075662975, 0.091046194738838404, 0.038155055664147071, 0.082176184438393141,
    0.054305013502185334, 0.069211385674467538, 0.014886660054333712, 0.10642602961975943,
    0.065275130481795396, 0.053820368571090745, -0.013752959262808442, 0.11152200723050924,
    0.068133092911680307, 0.03282877400906109, -0.039511136986149713, 0.13151366604210096,
    0.035353006943245356, 0.12526585978349117, 0.096111128364926759, 0.065238627473823849,
    0.064135723047865287, 0.11288367634599195, 0.051136297705438594, 0.047835778311340983,
    0.073227746775133731, 0.11578455630132094, 0.044269171658526806, 0.034851468029272185,
    0.084346300435426014, 0.11453843675355962, 0.03070664611162411, 0.024241483387777662,
    0.11310583916985836, 0.1311218149878457, 0.016965852390684547, -0.024971160954335683,
    0.084289935734722016, 0.14142872162269193, 0.059741178062101621, -0.0052517096198544744,
    0.073240425560278696, 0.14096096336494413, 0.071381225853034705, 0.0071675322955447977,
    0.060595267908207961, 0.13966065195121885, 0.083877955736327794, 0.022221005953159859,
    0.15438694634147154, 0.13131725873225644, -0.028193807839913505, -0.069663750873607766,
    0.14853237021910962, 0.14717817105205427, -0.0046701707311563884, -0.080787841788397138,
    0.1394799907545492, 0.16126086300319437, 0.020452110388777273, -0.086512138187480644,
    0.12916595723454524, 0.17425250492307903, 0.04578548214662901, -0.089677957188120105,
    0.1162869428015062, 0.18564930307182473, 0.072219567486036126, -0.088327348987241511,
    0.1002726412296653, 0.191912575784771, 0.096568458698952558, -0.077956636179201802,
    0.070184439223150957, 0.1918629945974982, 0.12958364975669368, -0.045484005900150885,
    0.040776966203346907, 0.18741118219746541, 0.15710755554234321, -0.0089065205592836951,
    0.025999294471131411, 0.17566113232486019, 0.16068910394685146, 0.019929447585886537,
    0.016191032096059627, 0.16130567525295864, 0.15600183264176795, 0.046274678718023189,
    0.0081322947074058301, 0.14648690705986994, 0.14889254734896862, 0.071244111903686402,
    0.0036918247987608845, 0.13144290183171278, 0.1375639056660552, 0.092562638409720024,
    0.001224285358040499, 0.11582458719148771, 0.12344812126504695, 0.11238665498024107,
};

/*
 * Simple C++ Test Suite
 */

bool loadVector(const std::string& fileName, int rows,
        int columns, aam::RealMatrix& target)
{
    cv::Mat1d result(rows, columns);

    FILE *in = fopen(fileName.c_str(), "rb");
    if (in == NULL)
    {
        return false;
    }

    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < columns; j++)
        {
            if (fread(result.ptr(i, j), sizeof(double), 1, in) != 1)
            {
                fclose(in);
                return false;
            }
        }
    }

    target = result;

    fclose(in);
    return true;
}

void testComputeJacobian()
{
    std::cout << "cjacobianTest testComputeJacobian" << std::endl;

    aam::AppearanceDataIC model;
    aam::TrainModelLoader loader;
    loader.useGrayImages(true);

    for (int i = 0; i < TRIANGLES_COUNT; i++)
    {
        model.triangles.push_back(cv::Vec3i(trianglesData[i * 3],
                trianglesData[i * 3 + 1], trianglesData[i * 3 + 2]));
    }

    try
    {
        cv::Mat1i warpMap = cv::imread("data/warp_map.bmp",
                cv::IMREAD_GRAYSCALE);

        if (warpMap.empty())
        {
            std::cout << "%TEST_FAILED% time=0 testname=testComputeJacobian (cjacobianTest) message=Can't read target map image" << std::endl;
            return;
        }
        else
        {
            warpMap -= 1;
        }

        std::vector<std::string> fileNames =
                boost::assign::list_of<std::string>
                ("107_0764.bmp")  /*("107_0766.bmp")*/  ("107_0779.bmp")
                ("107_0780.bmp")  ("107_0781.bmp")  ("107_0782.bmp")
                ("107_0783.bmp")  ("107_0784.bmp")  ("107_0785.bmp")
                ("107_0786.bmp")  ("107_0787.bmp")  ("107_0788.bmp")
                ("107_0789.bmp")  ("107_0790.bmp")  ("107_0791.bmp")
                ("107_0792.bmp")  ("107_0793.bmp")  ("107_0794.bmp")
                ("107_0795.bmp")  ("107_0798.bmp")  ("107_0799.bmp")
                ("107_0800.bmp")  ("108_0801.bmp")  ("108_0802.bmp")
                ("108_0803.bmp")  ("108_0804.bmp");

        for (int i = 0; i < fileNames.size(); i++)
        {
            std::ostringstream stream;

            stream << "data/cootes/" << fileNames[i] << ".mat.dat";
            std::string markupFile = stream.str();

            stream.str(std::string());

            stream << "data/cootes/" << fileNames[i];
            std::string imageFile = stream.str();

            loader.load(markupFile, imageFile);
        }

        std::vector<aam::TrainModelInfo> trainData = loader.getModels();
        aam::AAMFunctions2D::makeShapeModelIC(1,
                0.98,
                trainData, model);

        model.warpMap = warpMap;
        model.mask = (warpMap != -1);
        model.nPixels = cv::countNonZero(model.mask);
        cv::Size textureSize(warpMap.cols, warpMap.rows);

        aam::XYDerivation dWdp, dNdq;
        aam::AAMFunctions2D::computeJacobian(model, dWdp, dNdq);

        for (int i = 0; i < 4; i++)
        {
            cv::Mat xtexture, ytexture;
            aam::AAMFunctions2D::vector2Appearance(dNdq.xDerivation.col(i),
                    model.mask, textureSize, xtexture);
            aam::AAMFunctions2D::vector2Appearance(dNdq.yDerivation.col(i),
                    model.mask, textureSize, ytexture);
            cv::normalize(xtexture, xtexture, 1, 0, cv::NORM_MINMAX);
            cv::normalize(ytexture, ytexture, 1, 0, cv::NORM_MINMAX);

            cv::imshow("X Jacobian", xtexture);
            cv::imshow("Y Jacobian", ytexture);
            cv::waitKey(0);
        }
        cv::waitKey(0);
    }
    catch (std::exception& e)
    {
        std::cout << "%TEST_FAILED% time=0 testname=testComputeJacobian (cjacobianTest) message=Exception occured: " <<
                e.what() << std::endl;
    }
}

int main(int argc, char** argv)
{
    std::cout << "%SUITE_STARTING% cjacobianTest" << std::endl;
    std::cout << "%SUITE_STARTED%" << std::endl;

    std::cout << "%TEST_STARTED% testComputeJacobian (cjacobianTest)" << std::endl;
    testComputeJacobian();
    std::cout << "%TEST_FINISHED% time=0 testComputeJacobian (cjacobianTest)" << std::endl;

    std::cout << "%SUITE_FINISHED% time=0" << std::endl;

    return (EXIT_SUCCESS);
}
